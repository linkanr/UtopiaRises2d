// Editor/AutoCardEnumGenerator.cs
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Linq;
using System.Text;

public static class AutoCardEnumGenerator
{
    private const string enumName = "CardNames";
    private const string filePath = "Assets/Cards/CardNames.cs"; // Adjust path as needed

    [MenuItem("Tools/Cards/Regenerate Enum & Dictionary")]
    public static void GenerateEnumAndDictionary()
    {
        GenerateEnum();
        PopulateCardDatabase();
    }

    [MenuItem("Tools/Cards/Generate CardNames Enum Only")]
    public static void GenerateEnum()
    {
        string[] guids = AssetDatabase.FindAssets("t:SoCardBase");
        var names = guids
            .Select(guid => AssetDatabase.GUIDToAssetPath(guid))
            .Select(path => AssetDatabase.LoadAssetAtPath<SoCardBase>(path))
            .Where(card => card != null)
            .Select(card => card.name)
            .Distinct()
            .OrderBy(name => name)
            .ToList();

        StringBuilder builder = new StringBuilder();
        builder.AppendLine("// Auto-generated by AutoCardEnumGenerator");
        builder.AppendLine("public enum CardNames");
        builder.AppendLine("{");

        foreach (string name in names)
        {
            string validName = MakeSafeEnumName(name);
            builder.AppendLine($"    {validName},");
        }

        builder.AppendLine("}");

        Directory.CreateDirectory(Path.GetDirectoryName(filePath));
        File.WriteAllText(filePath, builder.ToString());
        AssetDatabase.Refresh();
        Debug.Log($"{enumName} regenerated with {names.Count} entries.");
    }

    [MenuItem("Tools/Cards/Populate Card Database Only")]
    public static void PopulateCardDatabase()
    {
        var cardDatabase = Resources.Load<SoAllCardsGlobalDic>("cardNames");
        if (cardDatabase == null)
        {
            Debug.LogError("Could not find SoAllCardsGlobalDic in Resources folder with name 'cardNames'.");
            return;
        }

        string[] guids = AssetDatabase.FindAssets("t:SoCardBase");
        var allCards = guids
            .Select(AssetDatabase.GUIDToAssetPath)
            .Select(AssetDatabase.LoadAssetAtPath<SoCardBase>)
            .Where(card => card != null)
            .ToList();

        cardDatabase.ClearAndAddAllCards(allCards);
        Debug.Log($"Card database updated with {allCards.Count} cards.");
    }

    private static string MakeSafeEnumName(string rawName)
    {
        var safe = new string(rawName.Where(char.IsLetterOrDigit).ToArray());
        if (string.IsNullOrWhiteSpace(safe)) safe = "Unnamed";
        if (char.IsDigit(safe.FirstOrDefault())) safe = "_" + safe;
        return safe;
    }
}
